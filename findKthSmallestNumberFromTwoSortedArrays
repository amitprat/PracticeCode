/*
Given two sorted arrays, we can get a set of sums(add one element from the first array and one from the second). Find the Nth element in the set of sums. Suppose that array A is {1,3,4,8,10}, array B is {20, 22, 30, 40}. then the sum set will be{21(1+20),23(1+22 or 3+20), 25(3+22), 24(4+22)...} the 3rd element in the sum set is 25.
1) Using Minheap
  - insert all elements in minheap and then extract kth smallest O(n*m)
  - insert(0,0) to minhheap, extract it and insert (i+1,k), (i,k+1) and increment count whenever you pop. Stop when you reach k. ( O(n*m) worst case, but works better if k is small as compared to n*m;
2) Merge two sorted arrays O (n+m) and then partition around kth smallest element O(n+m).

Below is minheap method - 
*/
#include 	<iostream>
#include	<climits>
#include	<queue>
using namespace std;
struct Node
{
	int sum;
	int i;
	int j;
	Node(int s,int i,int j) {
		this->sum = s;
		this->i = i;
		this->j = j;
	}
};
struct compare
{
	bool operator()(Node lhs,Node rhs){
		return (lhs.sum >= rhs.sum);
	}	
};
int main() {
	// your code goes here
	priority_queue<Node, vector<Node>, compare > pq;
	/*pq.push(Node(34,2,2));pq.push(Node(2,1,5));pq.push(Node(34,5,2));
	pq.push(Node(134,6,3));pq.push(Node(1,234,3));
	while(!pq.empty())	cout<<pq.top().sum<<" ", pq.pop();
	*/
	int a[] = {1,3,4,8,10};
	int b[] = {20,22,30,40};
	int lcount = 4;
	int kcount = 5;
	int k=0,l=0;
	pq.push( Node(a[k]+b[l],k,l) );
	int count = 0;
	int prev = INT_MIN;
	int given = 30;
	while(!pq.empty() && count < given) {
		Node n  = pq.top(); pq.pop();
		k =n.i;
		l = n.j; 
		
		if(n.sum != prev) {
			prev = n.sum; count++;
			cout<<count<<" "<<n.i<<" "<<n.j<<" "<<n.sum<<endl;
		}
		if(k+1 != kcount)
			pq.push( Node(a[k+1]+b[l],k+1,l));
		if(l+1 != lcount)
			pq.push( Node(a[k]+b[l+1],k,l+1));
		cout<<pq.size()<<endl;
	}
	if(count == given)
		cout<<prev<<endl;
	else
		cout<<"Does not exists"<<endl;
	
	return 0;
}
